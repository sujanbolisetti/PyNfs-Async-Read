# Generated by rpcgen.py from /home/sujan/Documents/pynfs/nfs4.1/xdrdef/pnfs_block.x on Thu Apr 30 23:23:55 2015
import pnfs_block_const as const
class pnfs_block_sig_component4:
    # XDR definition:
    # struct pnfs_block_sig_component4 {
    #     int64_t bsc_sig_offset;
    #     opaque bsc_contents<>;
    # };
    def __init__(self, bsc_sig_offset=None, bsc_contents=None):
        self.bsc_sig_offset = bsc_sig_offset
        self.bsc_contents = bsc_contents

    def __repr__(self):
        out = []
        if self.bsc_sig_offset is not None:
            out += ['bsc_sig_offset=%s' % repr(self.bsc_sig_offset)]
        if self.bsc_contents is not None:
            out += ['bsc_contents=%s' % repr(self.bsc_contents)]
        return 'pnfs_block_sig_component4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_simple_volume_info4:
    # XDR definition:
    # struct pnfs_block_simple_volume_info4 {
    #     pnfs_block_sig_component4 bsv_ds<PNFS_BLOCK_MAX_SIG_COMP>;
    # };
    def __init__(self, bsv_ds=None):
        self.bsv_ds = bsv_ds

    def __repr__(self):
        out = []
        if self.bsv_ds is not None:
            out += ['bsv_ds=%s' % repr(self.bsv_ds)]
        return 'pnfs_block_simple_volume_info4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_slice_volume_info4:
    # XDR definition:
    # struct pnfs_block_slice_volume_info4 {
    #     offset4 bsv_start;
    #     length4 bsv_length;
    #     uint32_t bsv_volume;
    # };
    def __init__(self, bsv_start=None, bsv_length=None, bsv_volume=None):
        self.bsv_start = bsv_start
        self.bsv_length = bsv_length
        self.bsv_volume = bsv_volume

    def __repr__(self):
        out = []
        if self.bsv_start is not None:
            out += ['bsv_start=%s' % repr(self.bsv_start)]
        if self.bsv_length is not None:
            out += ['bsv_length=%s' % repr(self.bsv_length)]
        if self.bsv_volume is not None:
            out += ['bsv_volume=%s' % repr(self.bsv_volume)]
        return 'pnfs_block_slice_volume_info4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_concat_volume_info4:
    # XDR definition:
    # struct pnfs_block_concat_volume_info4 {
    #     uint32_t bcv_volumes<>;
    # };
    def __init__(self, bcv_volumes=None):
        self.bcv_volumes = bcv_volumes

    def __repr__(self):
        out = []
        if self.bcv_volumes is not None:
            out += ['bcv_volumes=%s' % repr(self.bcv_volumes)]
        return 'pnfs_block_concat_volume_info4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_stripe_volume_info4:
    # XDR definition:
    # struct pnfs_block_stripe_volume_info4 {
    #     length4 bsv_stripe_unit;
    #     uint32_t bsv_volumes<>;
    # };
    def __init__(self, bsv_stripe_unit=None, bsv_volumes=None):
        self.bsv_stripe_unit = bsv_stripe_unit
        self.bsv_volumes = bsv_volumes

    def __repr__(self):
        out = []
        if self.bsv_stripe_unit is not None:
            out += ['bsv_stripe_unit=%s' % repr(self.bsv_stripe_unit)]
        if self.bsv_volumes is not None:
            out += ['bsv_volumes=%s' % repr(self.bsv_volumes)]
        return 'pnfs_block_stripe_volume_info4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_volume4:
    # XDR definition:
    # union pnfs_block_volume4 switch(pnfs_block_volume_type4 type) {
    #     case PNFS_BLOCK_VOLUME_SIMPLE:
    #         pnfs_block_simple_volume_info4 bv_simple_info;
    #     case PNFS_BLOCK_VOLUME_SLICE:
    #         pnfs_block_slice_volume_info4 bv_slice_info;
    #     case PNFS_BLOCK_VOLUME_CONCAT:
    #         pnfs_block_concat_volume_info4 bv_concat_info;
    #     case PNFS_BLOCK_VOLUME_STRIPE:
    #         pnfs_block_stripe_volume_info4 bv_stripe_info;
    # };
    def __init__(self, type=None, bv_simple_info=None, bv_slice_info=None, bv_concat_info=None, bv_stripe_info=None):
        self.type = type
        self.bv_simple_info = bv_simple_info
        self.bv_slice_info = bv_slice_info
        self.bv_concat_info = bv_concat_info
        self.bv_stripe_info = bv_stripe_info

    switch = property(lambda s: {const.PNFS_BLOCK_VOLUME_SIMPLE:s.bv_simple_info,const.PNFS_BLOCK_VOLUME_SLICE:s.bv_slice_info,const.PNFS_BLOCK_VOLUME_CONCAT:s.bv_concat_info,const.PNFS_BLOCK_VOLUME_STRIPE:s.bv_stripe_info,}[s.type])

    def __getattr__(self, attr):
        return getattr(self.switch, attr)

    def __repr__(self):
        out = []
        if self.type is not None:
            out += ['type=%s' % const.pnfs_block_volume_type4.get(self.type, self.type)]
        if self.bv_simple_info is not None:
            out += ['bv_simple_info=%s' % repr(self.bv_simple_info)]
        if self.bv_slice_info is not None:
            out += ['bv_slice_info=%s' % repr(self.bv_slice_info)]
        if self.bv_concat_info is not None:
            out += ['bv_concat_info=%s' % repr(self.bv_concat_info)]
        if self.bv_stripe_info is not None:
            out += ['bv_stripe_info=%s' % repr(self.bv_stripe_info)]
        return 'pnfs_block_volume4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_deviceaddr4:
    # XDR definition:
    # struct pnfs_block_deviceaddr4 {
    #     pnfs_block_volume4 bda_volumes<>;
    # };
    def __init__(self, bda_volumes=None):
        self.bda_volumes = bda_volumes

    def __repr__(self):
        out = []
        if self.bda_volumes is not None:
            out += ['bda_volumes=%s' % repr(self.bda_volumes)]
        return 'pnfs_block_deviceaddr4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_extent4:
    # XDR definition:
    # struct pnfs_block_extent4 {
    #     deviceid4 bex_vol_id;
    #     offset4 bex_file_offset;
    #     length4 bex_length;
    #     offset4 bex_storage_offset;
    #     pnfs_block_extent_state4 bex_state;
    # };
    def __init__(self, bex_vol_id=None, bex_file_offset=None, bex_length=None, bex_storage_offset=None, bex_state=None):
        self.bex_vol_id = bex_vol_id
        self.bex_file_offset = bex_file_offset
        self.bex_length = bex_length
        self.bex_storage_offset = bex_storage_offset
        self.bex_state = bex_state

    def __repr__(self):
        out = []
        if self.bex_vol_id is not None:
            out += ['bex_vol_id=%s' % repr(self.bex_vol_id)]
        if self.bex_file_offset is not None:
            out += ['bex_file_offset=%s' % repr(self.bex_file_offset)]
        if self.bex_length is not None:
            out += ['bex_length=%s' % repr(self.bex_length)]
        if self.bex_storage_offset is not None:
            out += ['bex_storage_offset=%s' % repr(self.bex_storage_offset)]
        if self.bex_state is not None:
            out += ['bex_state=%s' % const.pnfs_block_extent_state4.get(self.bex_state, self.bex_state)]
        return 'pnfs_block_extent4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_layout4:
    # XDR definition:
    # struct pnfs_block_layout4 {
    #     pnfs_block_extent4 blo_extents<>;
    # };
    def __init__(self, blo_extents=None):
        self.blo_extents = blo_extents

    def __repr__(self):
        out = []
        if self.blo_extents is not None:
            out += ['blo_extents=%s' % repr(self.blo_extents)]
        return 'pnfs_block_layout4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_layoutupdate4:
    # XDR definition:
    # struct pnfs_block_layoutupdate4 {
    #     pnfs_block_extent4 blu_commit_list<>;
    # };
    def __init__(self, blu_commit_list=None):
        self.blu_commit_list = blu_commit_list

    def __repr__(self):
        out = []
        if self.blu_commit_list is not None:
            out += ['blu_commit_list=%s' % repr(self.blu_commit_list)]
        return 'pnfs_block_layoutupdate4(%s)' % ', '.join(out)
    __str__ = __repr__

class pnfs_block_layouthint4:
    # XDR definition:
    # struct pnfs_block_layouthint4 {
    #     uint64_t blh_maximum_io_time;
    # };
    def __init__(self, blh_maximum_io_time=None):
        self.blh_maximum_io_time = blh_maximum_io_time

    def __repr__(self):
        out = []
        if self.blh_maximum_io_time is not None:
            out += ['blh_maximum_io_time=%s' % repr(self.blh_maximum_io_time)]
        return 'pnfs_block_layouthint4(%s)' % ', '.join(out)
    __str__ = __repr__

