# Generated by rpcgen.py from /home/sujan/Documents/pynfs/nfs4.1/xdrdef/pnfs_block.x on Thu Apr 30 23:23:55 2015
import pnfs_block_const as const
import pnfs_block_type as types
import xdrlib
from xdrlib import Error as XDRError

class nullclass(object):
    pass

class PNFS_BLOCKPacker(xdrlib.Packer):
    def __init__(self, check_enum=True, check_array=True):
        xdrlib.Packer.__init__(self)
        self.check_enum = check_enum
        self.check_array = check_array

    pack_hyper = xdrlib.Packer.pack_hyper
    pack_string = xdrlib.Packer.pack_string
    pack_int = xdrlib.Packer.pack_int
    pack_float = xdrlib.Packer.pack_float
    pack_uint = xdrlib.Packer.pack_uint
    pack_opaque = xdrlib.Packer.pack_opaque
    pack_double = xdrlib.Packer.pack_double
    pack_unsigned = xdrlib.Packer.pack_uint
    pack_quadruple = xdrlib.Packer.pack_double
    pack_uhyper = xdrlib.Packer.pack_uhyper
    pack_bool = xdrlib.Packer.pack_bool
    pack_uint32_t = pack_uint

    pack_int64_t = pack_hyper

    pack_uint64_t = pack_uhyper

    def pack_deviceid4(self, data):
        if hasattr(self, 'filter_deviceid4'):
            data = getattr(self, 'filter_deviceid4')(data)
        self.pack_fopaque(const.NFS4_DEVICEID4_SIZE, data)

    pack_length4 = pack_uint64_t

    pack_offset4 = pack_uint64_t

    def pack_pnfs_block_sig_component4(self, data):
        if hasattr(self, 'filter_pnfs_block_sig_component4'):
            data = getattr(self, 'filter_pnfs_block_sig_component4')(data)
        if data.bsc_sig_offset is None:
            raise TypeError, 'data.bsc_sig_offset == None'
        self.pack_int64_t(data.bsc_sig_offset)
        if data.bsc_contents is None:
            raise TypeError, 'data.bsc_contents == None'
        self.pack_opaque(data.bsc_contents)

    def pack_pnfs_block_volume_type4(self, data):
        if hasattr(self, 'filter_pnfs_block_volume_type4'):
            data = getattr(self, 'filter_pnfs_block_volume_type4')(data)
        if self.check_enum and data not in [const.PNFS_BLOCK_VOLUME_SIMPLE, const.PNFS_BLOCK_VOLUME_SLICE, const.PNFS_BLOCK_VOLUME_CONCAT, const.PNFS_BLOCK_VOLUME_STRIPE]:
            raise XDRError, 'value=%s not in enum pnfs_block_volume_type4' % data
        self.pack_int(data)

    def pack_pnfs_block_simple_volume_info4(self, data):
        if hasattr(self, 'filter_pnfs_block_simple_volume_info4'):
            data = getattr(self, 'filter_pnfs_block_simple_volume_info4')(data)
        if data.bsv_ds is None:
            raise TypeError, 'data.bsv_ds == None'
        if len(data.bsv_ds) > const.PNFS_BLOCK_MAX_SIG_COMP and self.check_array:
            raise XDRError, 'array length too long for data.bsv_ds'
        self.pack_array(data.bsv_ds, self.pack_pnfs_block_sig_component4)

    def pack_pnfs_block_slice_volume_info4(self, data):
        if hasattr(self, 'filter_pnfs_block_slice_volume_info4'):
            data = getattr(self, 'filter_pnfs_block_slice_volume_info4')(data)
        if data.bsv_start is None:
            raise TypeError, 'data.bsv_start == None'
        self.pack_offset4(data.bsv_start)
        if data.bsv_length is None:
            raise TypeError, 'data.bsv_length == None'
        self.pack_length4(data.bsv_length)
        if data.bsv_volume is None:
            raise TypeError, 'data.bsv_volume == None'
        self.pack_uint32_t(data.bsv_volume)

    def pack_pnfs_block_concat_volume_info4(self, data):
        if hasattr(self, 'filter_pnfs_block_concat_volume_info4'):
            data = getattr(self, 'filter_pnfs_block_concat_volume_info4')(data)
        if data.bcv_volumes is None:
            raise TypeError, 'data.bcv_volumes == None'
        self.pack_array(data.bcv_volumes, self.pack_uint32_t)

    def pack_pnfs_block_stripe_volume_info4(self, data):
        if hasattr(self, 'filter_pnfs_block_stripe_volume_info4'):
            data = getattr(self, 'filter_pnfs_block_stripe_volume_info4')(data)
        if data.bsv_stripe_unit is None:
            raise TypeError, 'data.bsv_stripe_unit == None'
        self.pack_length4(data.bsv_stripe_unit)
        if data.bsv_volumes is None:
            raise TypeError, 'data.bsv_volumes == None'
        self.pack_array(data.bsv_volumes, self.pack_uint32_t)

    def pack_pnfs_block_volume4(self, data):
        if hasattr(self, 'filter_pnfs_block_volume4'):
            data = getattr(self, 'filter_pnfs_block_volume4')(data)
        if data.type is None:
            raise TypeError, 'data.type == None'
        self.pack_pnfs_block_volume_type4(data.type)
        if data.type == const.PNFS_BLOCK_VOLUME_SIMPLE:
            if data.bv_simple_info is None:
                raise TypeError, 'data.bv_simple_info == None'
            self.pack_pnfs_block_simple_volume_info4(data.bv_simple_info)
        elif data.type == const.PNFS_BLOCK_VOLUME_SLICE:
            if data.bv_slice_info is None:
                raise TypeError, 'data.bv_slice_info == None'
            self.pack_pnfs_block_slice_volume_info4(data.bv_slice_info)
        elif data.type == const.PNFS_BLOCK_VOLUME_CONCAT:
            if data.bv_concat_info is None:
                raise TypeError, 'data.bv_concat_info == None'
            self.pack_pnfs_block_concat_volume_info4(data.bv_concat_info)
        elif data.type == const.PNFS_BLOCK_VOLUME_STRIPE:
            if data.bv_stripe_info is None:
                raise TypeError, 'data.bv_stripe_info == None'
            self.pack_pnfs_block_stripe_volume_info4(data.bv_stripe_info)
        else:
            raise XDRError, 'bad switch=%s' % data.type

    def pack_pnfs_block_deviceaddr4(self, data):
        if hasattr(self, 'filter_pnfs_block_deviceaddr4'):
            data = getattr(self, 'filter_pnfs_block_deviceaddr4')(data)
        if data.bda_volumes is None:
            raise TypeError, 'data.bda_volumes == None'
        self.pack_array(data.bda_volumes, self.pack_pnfs_block_volume4)

    def pack_pnfs_block_extent_state4(self, data):
        if hasattr(self, 'filter_pnfs_block_extent_state4'):
            data = getattr(self, 'filter_pnfs_block_extent_state4')(data)
        if self.check_enum and data not in [const.PNFS_BLOCK_READWRITE_DATA, const.PNFS_BLOCK_READ_DATA, const.PNFS_BLOCK_INVALID_DATA, const.PNFS_BLOCK_NONE_DATA]:
            raise XDRError, 'value=%s not in enum pnfs_block_extent_state4' % data
        self.pack_int(data)

    def pack_pnfs_block_extent4(self, data):
        if hasattr(self, 'filter_pnfs_block_extent4'):
            data = getattr(self, 'filter_pnfs_block_extent4')(data)
        if data.bex_vol_id is None:
            raise TypeError, 'data.bex_vol_id == None'
        self.pack_deviceid4(data.bex_vol_id)
        if data.bex_file_offset is None:
            raise TypeError, 'data.bex_file_offset == None'
        self.pack_offset4(data.bex_file_offset)
        if data.bex_length is None:
            raise TypeError, 'data.bex_length == None'
        self.pack_length4(data.bex_length)
        if data.bex_storage_offset is None:
            raise TypeError, 'data.bex_storage_offset == None'
        self.pack_offset4(data.bex_storage_offset)
        if data.bex_state is None:
            raise TypeError, 'data.bex_state == None'
        self.pack_pnfs_block_extent_state4(data.bex_state)

    def pack_pnfs_block_layout4(self, data):
        if hasattr(self, 'filter_pnfs_block_layout4'):
            data = getattr(self, 'filter_pnfs_block_layout4')(data)
        if data.blo_extents is None:
            raise TypeError, 'data.blo_extents == None'
        self.pack_array(data.blo_extents, self.pack_pnfs_block_extent4)

    def pack_pnfs_block_layoutupdate4(self, data):
        if hasattr(self, 'filter_pnfs_block_layoutupdate4'):
            data = getattr(self, 'filter_pnfs_block_layoutupdate4')(data)
        if data.blu_commit_list is None:
            raise TypeError, 'data.blu_commit_list == None'
        self.pack_array(data.blu_commit_list, self.pack_pnfs_block_extent4)

    def pack_pnfs_block_layouthint4(self, data):
        if hasattr(self, 'filter_pnfs_block_layouthint4'):
            data = getattr(self, 'filter_pnfs_block_layouthint4')(data)
        if data.blh_maximum_io_time is None:
            raise TypeError, 'data.blh_maximum_io_time == None'
        self.pack_uint64_t(data.blh_maximum_io_time)

class PNFS_BLOCKUnpacker(xdrlib.Unpacker):
    def __init__(self, data, check_enum=True, check_array=True):
        xdrlib.Unpacker.__init__(self, data)
        self.check_enum = check_enum
        self.check_array = check_array

    unpack_hyper = xdrlib.Unpacker.unpack_hyper
    unpack_string = xdrlib.Unpacker.unpack_string
    unpack_int = xdrlib.Unpacker.unpack_int
    unpack_float = xdrlib.Unpacker.unpack_float
    unpack_uint = xdrlib.Unpacker.unpack_uint
    unpack_opaque = xdrlib.Unpacker.unpack_opaque
    unpack_double = xdrlib.Unpacker.unpack_double
    unpack_unsigned = xdrlib.Unpacker.unpack_uint
    unpack_quadruple = xdrlib.Unpacker.unpack_double
    unpack_uhyper = xdrlib.Unpacker.unpack_uhyper
    unpack_bool = xdrlib.Unpacker.unpack_bool
    unpack_uint32_t = unpack_uint

    unpack_int64_t = unpack_hyper

    unpack_uint64_t = unpack_uhyper

    def unpack_deviceid4(self):
        data = self.unpack_fopaque(const.NFS4_DEVICEID4_SIZE)
        if hasattr(self, 'filter_deviceid4'):
            data = getattr(self, 'filter_deviceid4')(data)
        return data

    unpack_length4 = unpack_uint64_t

    unpack_offset4 = unpack_uint64_t

    def unpack_pnfs_block_sig_component4(self):
        data = types.pnfs_block_sig_component4()
        data.bsc_sig_offset = self.unpack_int64_t()
        data.bsc_contents = self.unpack_opaque()
        if hasattr(self, 'filter_pnfs_block_sig_component4'):
            data = getattr(self, 'filter_pnfs_block_sig_component4')(data)
        return data

    def unpack_pnfs_block_volume_type4(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.PNFS_BLOCK_VOLUME_SIMPLE, const.PNFS_BLOCK_VOLUME_SLICE, const.PNFS_BLOCK_VOLUME_CONCAT, const.PNFS_BLOCK_VOLUME_STRIPE]:
            raise XDRError, 'value=%s not in enum pnfs_block_volume_type4' % data
        if hasattr(self, 'filter_pnfs_block_volume_type4'):
            data = getattr(self, 'filter_pnfs_block_volume_type4')(data)
        return data

    def unpack_pnfs_block_simple_volume_info4(self):
        data = types.pnfs_block_simple_volume_info4()
        data.bsv_ds = self.unpack_array(self.unpack_pnfs_block_sig_component4)
        if len(data.bsv_ds) > const.PNFS_BLOCK_MAX_SIG_COMP and self.check_array:
            raise XDRError, 'array length too long for data.bsv_ds'
        if hasattr(self, 'filter_pnfs_block_simple_volume_info4'):
            data = getattr(self, 'filter_pnfs_block_simple_volume_info4')(data)
        return data

    def unpack_pnfs_block_slice_volume_info4(self):
        data = types.pnfs_block_slice_volume_info4()
        data.bsv_start = self.unpack_offset4()
        data.bsv_length = self.unpack_length4()
        data.bsv_volume = self.unpack_uint32_t()
        if hasattr(self, 'filter_pnfs_block_slice_volume_info4'):
            data = getattr(self, 'filter_pnfs_block_slice_volume_info4')(data)
        return data

    def unpack_pnfs_block_concat_volume_info4(self):
        data = types.pnfs_block_concat_volume_info4()
        data.bcv_volumes = self.unpack_array(self.unpack_uint32_t)
        if hasattr(self, 'filter_pnfs_block_concat_volume_info4'):
            data = getattr(self, 'filter_pnfs_block_concat_volume_info4')(data)
        return data

    def unpack_pnfs_block_stripe_volume_info4(self):
        data = types.pnfs_block_stripe_volume_info4()
        data.bsv_stripe_unit = self.unpack_length4()
        data.bsv_volumes = self.unpack_array(self.unpack_uint32_t)
        if hasattr(self, 'filter_pnfs_block_stripe_volume_info4'):
            data = getattr(self, 'filter_pnfs_block_stripe_volume_info4')(data)
        return data

    def unpack_pnfs_block_volume4(self):
        data = types.pnfs_block_volume4()
        data.type = self.unpack_pnfs_block_volume_type4()
        if data.type == const.PNFS_BLOCK_VOLUME_SIMPLE:
            data.bv_simple_info = self.unpack_pnfs_block_simple_volume_info4()
        elif data.type == const.PNFS_BLOCK_VOLUME_SLICE:
            data.bv_slice_info = self.unpack_pnfs_block_slice_volume_info4()
        elif data.type == const.PNFS_BLOCK_VOLUME_CONCAT:
            data.bv_concat_info = self.unpack_pnfs_block_concat_volume_info4()
        elif data.type == const.PNFS_BLOCK_VOLUME_STRIPE:
            data.bv_stripe_info = self.unpack_pnfs_block_stripe_volume_info4()
        else:
            raise XDRError, 'bad switch=%s' % data.type
        if hasattr(self, 'filter_pnfs_block_volume4'):
            data = getattr(self, 'filter_pnfs_block_volume4')(data)
        return data

    def unpack_pnfs_block_deviceaddr4(self):
        data = types.pnfs_block_deviceaddr4()
        data.bda_volumes = self.unpack_array(self.unpack_pnfs_block_volume4)
        if hasattr(self, 'filter_pnfs_block_deviceaddr4'):
            data = getattr(self, 'filter_pnfs_block_deviceaddr4')(data)
        return data

    def unpack_pnfs_block_extent_state4(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.PNFS_BLOCK_READWRITE_DATA, const.PNFS_BLOCK_READ_DATA, const.PNFS_BLOCK_INVALID_DATA, const.PNFS_BLOCK_NONE_DATA]:
            raise XDRError, 'value=%s not in enum pnfs_block_extent_state4' % data
        if hasattr(self, 'filter_pnfs_block_extent_state4'):
            data = getattr(self, 'filter_pnfs_block_extent_state4')(data)
        return data

    def unpack_pnfs_block_extent4(self):
        data = types.pnfs_block_extent4()
        data.bex_vol_id = self.unpack_deviceid4()
        data.bex_file_offset = self.unpack_offset4()
        data.bex_length = self.unpack_length4()
        data.bex_storage_offset = self.unpack_offset4()
        data.bex_state = self.unpack_pnfs_block_extent_state4()
        if hasattr(self, 'filter_pnfs_block_extent4'):
            data = getattr(self, 'filter_pnfs_block_extent4')(data)
        return data

    def unpack_pnfs_block_layout4(self):
        data = types.pnfs_block_layout4()
        data.blo_extents = self.unpack_array(self.unpack_pnfs_block_extent4)
        if hasattr(self, 'filter_pnfs_block_layout4'):
            data = getattr(self, 'filter_pnfs_block_layout4')(data)
        return data

    def unpack_pnfs_block_layoutupdate4(self):
        data = types.pnfs_block_layoutupdate4()
        data.blu_commit_list = self.unpack_array(self.unpack_pnfs_block_extent4)
        if hasattr(self, 'filter_pnfs_block_layoutupdate4'):
            data = getattr(self, 'filter_pnfs_block_layoutupdate4')(data)
        return data

    def unpack_pnfs_block_layouthint4(self):
        data = types.pnfs_block_layouthint4()
        data.blh_maximum_io_time = self.unpack_uint64_t()
        if hasattr(self, 'filter_pnfs_block_layouthint4'):
            data = getattr(self, 'filter_pnfs_block_layouthint4')(data)
        return data

